import { Store } from 'redux';

export class AssertionError extends Error {}
export function assert(assertion: boolean, message?: string): void;

/**
 * Chains together functions so that the result of the last function is used
 * when calling the next function. If some other object is used, it will be used
 * as the value for the next function in the chain.
 * @returns {any} result of last function
 */
export function chain(...functions: Array<Function | any>): any

type ClassListItem =
	string | number |
	{ [className: string]: boolean } |
	undefined | null
/**
 * A simple javascript utility for conditionally joining classNames together.
 * Slight ES6 adjustments from the fork.
 * @see https://github.com/JedWatson/classnames
 */
export function classlist(...classes: Array<ClassListItem | ClassListItem[]>): string

/**
 * Transforms an array of objects into a keyed map, using the specified
 * key property as the key used in the Map.
 */
export function arrayToMap<T extends Object, K extends keyof T>(
	array: T[],
	idKey: K
): Map<K, T>

/**
 * Transforms an array of objects into a keyed object, using the specified
 * key property as the key used in the new object.
 */
export function arrayToObjectMap<T extends Object, K extends keyof T>(
	array: T[],
	idKey: K
): { [id: K]: T }

/**
 * Transforms a map into an object. Non-string and non-number keys are ignored.
 * @param {Map} map
 * @returns {object}
 */
export function mapToObject<T>(map: Map<string|number, T>): { [key: string]: T }

/**
 * Returns a function that, when called,
 * returns a genrator object that is immediately
 * ready for input via `next()`
 */
export function coroutine<T>(generator): (...args: any[]) => IterableIterator<T>;

/**
 * Generate unique IDs. Guaranteed to be unique when compared to other strings
 * generated by this function. The strings are complex enough that they
 * shouldn't be accidentally duplicated by hand.
 *
 * Math.random should be unqiue because of its seeding algorithm.
 * Convert it to base 36 (numbers + letters), and grab the first 9 characters
 * after the decimal.
 *
 * @param {string} [prefix='_'] used to change the ID prefix. Use an empty string
 * for no prefix.
 * @returns {string}
 * @see https://gist.github.com/gordonbrander/2230317
 */
export function id(prefix?: string): string

/**
 * Utility for running function only when the given redux state changes.
 * @param {Store} store - store created by redux
 * @param {function} select - selector that takes the state as a param
 * and returns a subset of the state. To activate on any state change,
 * the function would be state => state.
 * @param {function} onChange - function to run on change, takes the
 * selected state and the previous selected state as its parameters.
 * @return {function} activate to unsubscribe from the store.
 * @see https://github.com/reactjs/redux/issues/303#issuecomment-125184409
 */
export function observeStore<S, T>(
	store: Store<S>,
	select: (state: S) => T,
	onChange: (newState: T, oldState: T) => void,
): () => void;

/**
 * A function that can be used as the 'default value' of a parameter to quickly
 * throw TypeErrors for required parameters
 * @param {string} [message] - appends extra text to the error message.
 * @throws {TypeError}
 * @alias module:lib/utils.required
 * @example
 * function foo(bar = required()) {
 *   //code that needs bar
 * }
 *
 * foo() //TypeError: Missing required function parameter
 * @example
 * function hello(target = required('target')) {
 *   return 'Hello ' + target;
 * }
 * hello() //TypeError: Missing required function parameter target
 */
export function required(message?: string): never

/**
 * Acts like Object.assign, but for Map objects instead.
 * @param {Map} target
 * @param {...Iterable<K, V>} sources
 * @returns {Map} target
 */
export function setAll<K, V>(
	target: Map<K, V>,
	...sources: Iterable<[K, V]>[]
): Map<K, V>
