{"version":3,"file":"index.node.js","sources":["domready.js","classlist.js","id.js","diff.js","array-to-map.js","required.js","omit.js","format.js"],"sourcesContent":["/**\r\n * Checks if the document has a non-loading readystate, and resolves\r\n * once it does/changes to be ready.\r\n * @param {Document} document\r\n * @returns {Promise} resolves when ready\r\n * @alias module:lib/utils.isReady\r\n */\r\nexport const isReady = document => new Promise(resolve => {\r\n\tfunction checkState() {\r\n\t\tif (document.readyState != 'loading') {\r\n\t\t\tresolve(); return true;\r\n\t\t}\r\n\t}\r\n\tif (checkState()) return;\r\n\tdocument.addEventListener('readystatechange', checkState);\r\n})\r\n\r\n/**\r\n * Resolves when the DOM is ready to interact with\r\n * @type {Promise<void>}\r\n * @author Jake Archibald\r\n * @see {@link https://github.com/jakearchibald/offline-wikipedia}\r\n * @requires document\r\n * @alias module:lib/utils.domReady\r\n */\r\nconst domReady = typeof document === 'undefined' \r\n\t? null\r\n\t: isReady(document);\r\nexport default domReady;","const has = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * A simple javascript utility for conditionally joining classNames together.\r\n * Slight ES6 adjustments from the fork.\r\n * @see https://github.com/JedWatson/classnames\r\n * @alias module:lib/utils.classlist\r\n */\r\nexport default function classList(...classes) {\r\n\tlet list = [];\r\n\tfor (let classname of classes) {\r\n\t\tif (!classname) continue; //skip falsy values\r\n\t\t\r\n\t\tconst type = typeof classname;\r\n\t\tif (type === 'string' || type === 'number') \r\n\t\t\tlist.push(classname);\r\n\t\telse if (Array.isArray(classname)) \r\n\t\t\tlist.push( classList(...classname) );\r\n\t\telse if (type === 'object') {\r\n\t\t\tfor (let key in classname) \r\n\t\t\t\tif (has(classname, key) && classname[key]) list.push(key);\r\n\t\t}\r\n\t}\r\n\treturn list.join(' ');\r\n}","/**\r\n * Generate unique IDs. Guaranteed to be unique when compared to other strings\r\n * generated by this function. The strings are complex enough that they \r\n * shouldn't be accidentally duplicated by hand.\r\n * \r\n * Math.random should be unqiue because of its seeding algorithm.\r\n * Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n * after the decimal.\r\n * \r\n * @returns {string}\r\n * @see https://gist.github.com/gordonbrander/2230317\r\n * @alias module:lib/utils.id\r\n */\r\nconst id = () => '_' + Math.random().toString(36).substr(2, 9);\r\nexport default id;","const has = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\nexport const REMOVED = Symbol();\r\n\r\n/**\r\n * Returns an object only containing properties that have changed between\r\n * the two given objects.\r\n * @param {Object} oldStore\r\n * @param {Object} newStore\r\n * @returns {Object[]} an object with only updated keys. Removed keys are\r\n * given a value of the REMOVED Symbol.\r\n * @alias module:lib/utils.diff\r\n */\r\nexport default function diff(oldStore, newStore) {\r\n\tif (oldStore === newStore) return undefined;\r\n\tif (typeof newStore !== typeof oldStore) return newStore;\r\n\telse if (Array.isArray(newStore)) {\r\n\t\tlet clone = [...newStore];\r\n\t\treturn oldStore.reduce((difference, oldValue) => {\r\n\t\t\tconst newIndex = clone.indexOf(oldValue);\r\n\t\t\tif (newIndex === -1) difference.push(REMOVED);\r\n\t\t\telse {\r\n\t\t\t\tconst subdiff = diff(oldValue, clone[newIndex]);\r\n\t\t\t\tdifference.push(subdiff);\r\n\t\t\t\tclone.splice(newIndex, 1); \r\n\t\t\t}\r\n\t\t\treturn difference;\r\n\t\t}, []).concat(clone);\r\n\t} else if (typeof newStore == 'object' && newStore !== null) {\r\n\t\tlet oldKeys = Object.keys(oldStore);\r\n\t\tlet difference = {};\r\n\t\tfor (let newKey in newStore) {\r\n\t\t\tif (!has(oldStore, newKey)) difference[newKey] = newStore[newKey];\r\n\t\t\telse {\r\n\t\t\t\tconst subdiff = diff(oldStore[newKey], newStore[newKey]);\r\n\t\t\t\tif (subdiff !== undefined) difference[newKey] = subdiff;\r\n\t\t\t\toldKeys.splice(oldKeys.indexOf(newKey), 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let removedKey of oldKeys) difference[removedKey] = REMOVED;\r\n\t\treturn difference;\r\n\t} else return newStore;\r\n}","import id from './id.js'\r\n\r\n/**\r\n * Transforms an array of objects into a keyed map, using the specified\r\n * key property as the key used in the Map.\r\n * @param {Array<Object>} array\r\n * @param {string} [idKey]\r\n * @returns {Map<string, Object>}\r\n * @alias module:lib/utils.arrayToMap\r\n */\r\nexport function arrayToMap(array, idKey) {\r\n\treturn array.reduce((map, obj) => map.set(obj[idKey]||id(), obj), new Map());\r\n}\r\n\r\n/**\r\n * Transforms an array of objects into a keyed object, using the specified\r\n * key property as the key used in the new object.\r\n * @param {Array<Object>} array\r\n * @param {string} [idKey]\r\n * @returns {Object}\r\n * @alias module:lib/utils.arrayToObjectMap\r\n */\r\nexport function arrayToObjectMap(array, idKey) {\r\n\tif (!Array.isArray(array))\r\n\t\tthrow TypeError('arrayToObjectMap was not given an array');\r\n\r\n\treturn array.reduce((newObj, obj) => {\r\n\t\tnewObj[obj[idKey] || id()] = obj;\r\n\t\treturn newObj;\r\n\t}, {});\r\n}\r\n\r\n/**\r\n * Transforms a map into an object. Non-string and non-number keys are ignored.\r\n * @param {Map} map\r\n * @returns {Object}\r\n * @alias module:lib/utils.mapToObject\r\n */\r\nexport function mapToObject(map) {\r\n\tlet obj = {};\r\n\tfor (const [key, value] of map) \r\n\t\tif (typeof key === 'string') obj[key] = value;\r\n\treturn obj;\r\n}","/**\r\n * A function that can be used as the 'default value' of a parameter to quickly\r\n * throw TypeErrors for required parameters\r\n * @param {string} [message] - appends extra text to the error message.\r\n * @throws {TypeError} \r\n * @alias module:lib/utils.required\r\n * @example\r\n * function foo(bar = required()) {\r\n *   //code that needs bar\r\n * }\r\n * \r\n * foo() //TypeError: Missing required function parameter\r\n * @example\r\n * function hello(target = required('target')) {\r\n *   return 'Hello ' + target;\r\n * }\r\n * hello() //TypeError: Missing required function parameter target\r\n */\r\nexport default function required(message) {\r\n\tconst append = message ? ` ${message}` : '';\r\n\tthrow TypeError('Missing required function parameter' + append);\r\n}","/**\r\n * Creates an object composed of the own string keyed\r\n * properties of source that are not set to be omitted.\r\n * @param {Object} source\r\n * @param {...string|string[]} props\r\n * @returns {Object}\r\n */\r\nexport default function omit(source = {}, ...props) {\r\n\tif (props.length === 0 && Array.isArray(props[0])) props = props[0];\r\n\r\n\tlet target = {};\r\n\tfor (const key in source) {\r\n\t\tif (!props.includes(key)) target[key] = source[key];\r\n\t}\r\n\r\n\treturn target;\r\n}","/**\r\n * Formats a camelCase string into a string with normal casing and spaces.\r\n * @param {string} string\r\n * @returns {string}\r\n * @example\r\n * format('camelCaseText') //returns Camel Case Text\r\n */\r\nexport default function format(string) {\r\n\tif (typeof string === 'undefined') return undefined;\r\n\tconst spaced = string.replace(/[A-Z]/g, match => ` ${match}`);\r\n\treturn spaced.charAt(0).toUpperCase() + spaced.substr(1);\r\n}"],"names":["has"],"mappings":"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"}